<?php

namespace Tests\Models;

use App\Models\Post;
use App\Models\User;
use App\Models\UserCurrentPost;
use App\Utils\PostTypeEnum;
use App\Utils\UserRoleEnum;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class UserCurrentPostTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::connection(env('DB_CONNECTION'))->delete("DELETE FROM posts");
        DB::connection(env('DB_CONNECTION'))->delete("DELETE FROM users");
    }

    private function createUser(): User
    {
        $email = 'mk.utif.dori@pertamina.com';
        $user = User::factory()->create([
            'name' => 'Utif Milkedori',
            'email' => $email,
            'username' => explode('@', $email)[0],
            'role' => UserRoleEnum::USER_DEV_ROLE->value
        ]);
        $user->id = $user->get('id')[0]['id'];

        return $user;
    }
    public function testName()
    {
        self::assertNotNull($this->createUser());
    }

    public function testIsUserCurrentPostFinished()
    {
        $user = $this->createUser();
        self::assertNotNull($user->id);

        $currentPost = User::query()->find($user->id)->currentPost;
        self::assertNull($currentPost);
    }

    public function testUserCurrentPostRelation()
    {
        $user = $this->createUser();
        $post = [
            'title' => fake()->name(),
            'description' => fake()->name(),
            'type' => PostTypeEnum::POST_WORK_ORDER_TYPE->value,
            'user_id' => $user->id
        ];
        $posted = Post::factory()->create($post);
        $posted->id = $posted->get('id')[0]['id'];
        self::assertNotNull($posted);

        $userCurrentPost = UserCurrentPost::factory()->create([
            'user_id' => $user->id,
            'post_id' => $posted->id
        ]);
        self::assertNotNull($userCurrentPost);
        // $getUserCurrentPost = UserCurrentPost::query()->find($userCurrentPost->id)->get();
        self::assertNotNull($userCurrentPost->user);

        $userRelated = User::query()->find($userCurrentPost->user->id);
        self::assertNotNull($userRelated);
        self::assertSame($user->id, $userRelated->id);
        self::assertSame($user->email, $userRelated->email);
        self::assertSame($userCurrentPost->user->id, $userRelated->id);
        self::assertSame($userCurrentPost->step_at, $userRelated->currentPost->step_at);
        self::assertSame($userCurrentPost->steps, $userRelated->currentPost->steps);

        // Log::debug(json_encode($user->currentPost));
        self::assertNotNull($user->currentPost);
    }
}
